version: "3.7"
services:
  app:
    build:
      args:
        user: www
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    image: laravel-image
    container_name: laravel-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./app:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  db:
    image: mysql:5.7
    container_name: laravel-db
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: laravel-nginx
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./app:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  frontend:
    build:
      context: ./  # Путь к директории с кодом фронтенда
      dockerfile: Dockerfile.spa
    image: vue-frontend
    container_name: vue-frontend
    restart: unless-stopped
    ports:
      - 8080:8080  # Порт, на котором будет работать фронтенд-сервис
    volumes:
      - ./frontend/todo-vue-spa:/app  # Монтируем код фронтенда внутрь контейнера
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api-backup
    restart: unless-stopped
    ports:
      - 5000:5000
    depends_on:
      - db
    environment:
      - MYSQL_HOST=laravel-db
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DB=${DB_DATABASE}
    networks:
      - app-network
    volumes:
      - ./api:/app  # Монтируем код

networks:
  app-network:
    driver: bridge
